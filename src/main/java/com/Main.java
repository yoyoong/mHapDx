package com;

import com.args.SearchPrimerArgs;
import org.apache.commons.cli.*;

public class Main {
    static SearchPrimer searchPrimer = new SearchPrimer();

    public static void main(String[] args) throws Exception {
        System.setProperty("java.awt.headless", "true");

        if (args != null && args[0] != null && !"".equals(args[0])) {
            if (args[0].equals("searchPrimer")) {
                SearchPrimerArgs searchPrimeryArgs = parsesearchPrimer(args);
                if (searchPrimeryArgs != null) {
                    searchPrimer.searchPrimer(searchPrimeryArgs);
                }
            } else {
                System.out.println("unrecognized command:" + args[0]);
            }
        } else { // show the help message

        }
    }

    private static SearchPrimerArgs parsesearchPrimer(String[] args) throws ParseException {
        String mhapPathT_Description = "input tumor file,mhap.gz format,generated by mHapTools and indexed";
        String mhapPathN_Description = "input normal file,mhap.gz format,generated by mHapTools and indexed";
        String cpgPath_Description = "genomic CpG file, gz format and indexed";
        String region_Description = "one region, in the format of chr:start-end";
        String bedPath_Description = "input BED file";
        String outputDir_Description = "output directory, created in advance";
        String tag_Description = "prefix of the output file(s)";
        String fLength_Description = "fLength";
        String rLength_Description = "rLength";
        String minT_Description = "minT";
        String maxN_Description = "maxN";
        String minFC_Description = "minFC";
        String minInsertSize_Description = "minInsertSize";
        String maxInsertSize_Description = "maxInsertSize";
        String minCov_Description = "minCov";

        Options options = new Options();
        Option option0 = OptionBuilder.withLongOpt("help").withDescription("help").create("h");
        Option option1 = OptionBuilder.withLongOpt("mhapPathT").hasArg().withDescription(mhapPathT_Description).create("mhapPathT");
        Option option2 = OptionBuilder.withLongOpt("mhapPathN").hasArg().withDescription(mhapPathN_Description).create("mhapPathN");
        Option option3 = OptionBuilder.withLongOpt("cpgPath").hasArg().withDescription(cpgPath_Description).create("cpgPath");
        Option option4 = OptionBuilder.withLongOpt("region").hasArg().withDescription(region_Description).create("region");
        Option option15 = OptionBuilder.withLongOpt("bedPath").hasArg().withDescription(bedPath_Description).create("bedPath");
        Option option5 = OptionBuilder.withLongOpt("outputDir").hasArg().withDescription(outputDir_Description).create("outputDir");
        Option option6 = OptionBuilder.withLongOpt("tag").hasArg().withDescription(tag_Description).create("tag");
        Option option7 = OptionBuilder.withLongOpt("fLength").hasArg().withDescription(fLength_Description).create("fLength");
        Option option8 = OptionBuilder.withLongOpt("rLength").hasArg().withDescription(rLength_Description).create("rLength");
        Option option9 = OptionBuilder.withLongOpt("minT").hasArg().withDescription(minT_Description).create("minT");
        Option option10 = OptionBuilder.withLongOpt("maxN").hasArg().withDescription(maxN_Description).create("maxN");
        Option option11 = OptionBuilder.withLongOpt("minFC").hasArg().withDescription(minFC_Description).create("minFC");
        Option option12 = OptionBuilder.withLongOpt("minInsertSize").hasArg().withDescription(minInsertSize_Description).create("minInsertSize");
        Option option13 = OptionBuilder.withLongOpt("maxInsertSize").hasArg().withDescription(maxInsertSize_Description).create("maxInsertSize");
        Option option14 = OptionBuilder.withLongOpt("minCov").hasArg().withDescription(minCov_Description).create("minCov");
        options.addOption(option0).addOption(option1).addOption(option2).addOption(option3).addOption(option4).addOption(option5)
                .addOption(option6).addOption(option7).addOption(option8).addOption(option9).addOption(option10).addOption(option11)
                .addOption(option12).addOption(option13).addOption(option14).addOption(option15);

        BasicParser parser = new BasicParser();
        SearchPrimerArgs searchPrimerArgs = new SearchPrimerArgs();

        CommandLine commandLine = parser.parse(options, args);
        if (commandLine.getOptions().length > 0) {
            if (commandLine.hasOption('h')) {
                HelpFormatter helpFormatter = new HelpFormatter();
                helpFormatter.printHelp("Options", options);
                return null;
            } else {
                searchPrimerArgs.setMhapPathT(commandLine.getOptionValue("mhapPathT"));
                searchPrimerArgs.setMhapPathN(commandLine.getOptionValue("mhapPathN"));
                searchPrimerArgs.setCpgPath(commandLine.getOptionValue("cpgPath"));
                if (commandLine.hasOption("region")) {
                    searchPrimerArgs.setRegion(commandLine.getOptionValue("region"));
                }
                if (commandLine.hasOption("bedPath")) {
                    searchPrimerArgs.setBedPath(commandLine.getOptionValue("bedPath"));
                }
                if (commandLine.hasOption("outputDir")) {
                    searchPrimerArgs.setOutputDir(commandLine.getOptionValue("outputDir"));
                }
                if (commandLine.hasOption("tag")) {
                    searchPrimerArgs.setTag(commandLine.getOptionValue("tag"));
                }
                if (commandLine.hasOption("fLength")) {
                    searchPrimerArgs.setfLength(Integer.valueOf(commandLine.getOptionValue("fLength")));
                }
                if (commandLine.hasOption("rLength")) {
                    searchPrimerArgs.setrLength(Integer.valueOf(commandLine.getOptionValue("rLength")));
                }
                if (commandLine.hasOption("minT")) {
                    searchPrimerArgs.setMinT(Double.valueOf(commandLine.getOptionValue("minT")));
                }
                if (commandLine.hasOption("maxN")) {
                    searchPrimerArgs.setMaxN(Double.valueOf(commandLine.getOptionValue("maxN")));
                }
                if (commandLine.hasOption("minFC")) {
                    searchPrimerArgs.setMinFC(Double.valueOf(commandLine.getOptionValue("minFC")));
                }
                if (commandLine.hasOption("minInsertSize")) {
                    searchPrimerArgs.setMinInsertSize(Integer.valueOf(commandLine.getOptionValue("minInsertSize")));
                }
                if (commandLine.hasOption("maxInsertSize")) {
                    searchPrimerArgs.setMaxInsertSize(Integer.valueOf(commandLine.getOptionValue("maxInsertSize")));
                }
                if (commandLine.hasOption("minCov")) {
                    searchPrimerArgs.setMinCov(Integer.valueOf(commandLine.getOptionValue("minCov")));
                }
            }
        } else {
            System.out.println("The paramter is null");
        }

        return searchPrimerArgs;
    }
}
